#!/bin/bash

ROOTDIR=`pwd`
export ROOTDIR=$ROOTDIR

kernel_id="4.4.x"
kernel_cf=""
kernel_tf=""
busybox_id="1.24.x"
busybox_cf="$ROOTDIR/configs/boards/busybox.config"
busybox_tf="$ROOTDIR/user/busybox/busybox-${busybox_id}/.config"
board_h=""
board_mk=""
paragon_hfsplus=0

func_enable_kernel_param()
{
	if [ ! -n "$2" ];then
		own="y"
	else
		own="m"
	fi
	
	if [ -n "`grep \^\"\# $1 is not set\" $kernel_tf`" ] ; then
		sed -i "s/\# $1 is not set/$1=$own/" $kernel_tf
	fi
}

func_disable_kernel_param()
{
	if [ -n "`grep \^$1=y $kernel_tf`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $kernel_tf
	elif [ -n "`grep \^$1=m $kernel_tf`" ] ; then
		sed -i "s/$1=m/\# $1 is not set/" $kernel_tf
	fi
}

func_enable_busybox_param()
{
	if [ -n "`grep \^\"\# $1 is not set\" $busybox_tf`" ] ; then
		sed -i "s/\# $1 is not set/$1=y/" $busybox_tf
	fi
}

func_disable_busybox_param()
{
	if [ -n "`grep \^$1=y $busybox_tf`" ] ; then
		sed -i "s/$1=y/\# $1 is not set/" $busybox_tf
	fi
}

# load project root config
. $ROOTDIR/.config

if [ ! -f "$ROOTDIR/vendors/Ralink/config.arch" ] ; then
	echo "Project product dir not found! Terminate."
	exit 1
fi

if [ ! -d "$ROOTDIR/$CONFIG_LINUXDIR" ] ; then
	echo "Project Linux Kernel dir ($CONFIG_LINUXDIR) not found! Terminate."
	exit 1
fi

board_h="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID/board.h"
board_mk="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID/board.mk"
kernel_cd="$ROOTDIR/configs/boards/$CONFIG_FIRMWARE_PRODUCT_ID"
kernel_tf="$ROOTDIR/$CONFIG_LINUXDIR/.config"

if [ "$CONFIG_FIRMWARE_TYPE_ROOTFS_IN_RAM" = "y" ] ; then
	kernel_cf="${kernel_cd}/kernel-${kernel_id}.ram.config"
elif [ -n "$CONFIG_FIRMWARE_KERNEL_CONFIG" ]; then
	kernel_cf="${kernel_cd}/$CONFIG_FIRMWARE_KERNEL_CONFIG"
else
	kernel_cf="${kernel_cd}/kernel-${kernel_id}.config"
fi

if [ ! -f "$kernel_cf" ] ; then
	echo "Target kernel config ($kernel_cf) not found! Terminate."
	exit 1
fi

if [ ! -f "$busybox_cf" ] ; then
	echo "Target BusyBox config ($busybox_cf) not found! Terminate."
	exit 1
fi

if [ ! -f "$board_h" ] ; then
	echo "Target board header ($board_h) not found! Terminate."
	exit 1
fi

if [ ! -f "$board_mk" ] ; then
	echo "Target board descriptor ($board_mk) not found! Terminate."
	exit 1
fi

rm -rf $ROOTDIR/romfs
rm -rf $ROOTDIR/images
mkdir -p $ROOTDIR/romfs
mkdir -p $ROOTDIR/images

# load source kernel config
. "$kernel_cf"

######################### FOR-ALL-DEVICES #############################
ln -sf vendors/Ralink/config.arch config.arch
cp -fL "$kernel_cf" "$kernel_tf"
cp -fL "$busybox_cf" "$busybox_tf"
cp -fL "$board_mk" "$ROOTDIR/user/board.mk"
cp -fL "$board_h" "$ROOTDIR/user/shared/src/include/ralink_board.h"
############################# SMP #####################################
if [ -n "$CONFIG_SMP" ] ; then
	func_enable_busybox_param "CONFIG_FEATURE_TOP_SMP_CPU"
	func_enable_busybox_param "CONFIG_FEATURE_TOP_SMP_PROCESS"
fi
############################# RTC #####################################
if [ -n "$CONFIG_RTC_CLASS" ] ; then
	func_enable_busybox_param "CONFIG_HWCLOCK"
fi
# SFE
if [ "$CONFIG_FIRMWARE_INCLUDE_SFE" = "y" ] ; then
	func_enable_kernel_param "CONFIG_SHORTCUT_FE"
fi
# wireguard
if [ "$CONFIG_FIRMWARE_INCLUDE_WIREGUARD" = "y" ]; then
	func_enable_kernel_param "CONFIG_WIREGUARD"
else
	func_disable_kernel_param "CONFIG_WIREGUARD"
fi
# SQM QOS
if [ "$CONFIG_FIRMWARE_INCLUDE_SQM" = "y" ]; then
	func_enable_kernel_param "CONFIG_NF_CONNTRACK_EVENTS"
	sed -i "/CONFIG_NF_CONNTRACK_EVENTS=y/a\CONFIG_NF_CONNTRACK_CHAIN_EVENTS=y" $kernel_tf
	func_enable_kernel_param "CONFIG_NF_CONNTRACK_TIMEOUT"
	func_enable_kernel_param "CONFIG_NET_SCH_SFQ" "m"
	sed -i "/CONFIG_NET_SCH_SFQ=m/a\CONFIG_NET_SCH_CAKE=m" $kernel_tf
	func_enable_kernel_param "CONFIG_NET_SCH_CODEL" "m"
	func_enable_kernel_param "CONFIG_NET_ACT_IPT" "m"
	func_enable_kernel_param "CONFIG_IFB"
fi
# CPUFREQ
if [ "$CONFIG_FIRMWARE_INCLUDE_OC" = "y" ]; then	
	sed -i "/CONFIG_RALINK_MT7621=y/a\CONFIG_MT7621_OC=y" $kernel_tf
	sed -i '/CONFIG_MT7621_OC=y/a\CONFIG_MT7621_CPU_FREQ="'$CONFIG_FIRMWARE_MT7621_OC'"' $kernel_tf
fi

############################# USB #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_USB" != "y" ] || [ -z "$CONFIG_USB_SUPPORT" ] ; then
	func_disable_busybox_param "CONFIG_FDISK"
	func_disable_busybox_param "CONFIG_FEATURE_FDISK_WRITABLE"
	func_disable_busybox_param "CONFIG_FEATURE_FDISK_ADVANCED"
	func_disable_busybox_param "CONFIG_MICROCOM"
	func_disable_busybox_param "CONFIG_EJECT"
	func_disable_busybox_param "CONFIG_FEATURE_EJECT_SCSI"
	func_disable_busybox_param "CONFIG_MKSWAP"
	func_disable_busybox_param "CONFIG_SWAPONOFF"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_FAT"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXFAT"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_NTFS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_HFS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXT"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_XFS"
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_LINUXSWAP"
else
if [ "$CONFIG_FIRMWARE_ENABLE_UFSD" != "y" ] || [ $paragon_hfsplus -eq 0 ] ; then
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_HFS"
fi
############################# FAT #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_FAT" != "y" ] ; then
        func_disable_kernel_param "CONFIG_FAT_FS"
        func_disable_kernel_param "CONFIG_MSDOS_FS"
        func_disable_kernel_param "CONFIG_VFAT_FS"
fi
############################ exFAT ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXFAT" != "y" ] ; then
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_EXFAT"
	func_disable_kernel_param "CONFIG_EXFAT_FS"
fi
############################# EXT2 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXT2" != "y" ] ; then
        func_disable_kernel_param "CONFIG_EXT2_FS"
fi
############################# EXT3 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXT3" != "y" ] ; then
        func_disable_kernel_param "CONFIG_EXT3_FS"
fi
############################# EXT4 ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_EXT4" != "y" ] ; then
        func_disable_kernel_param "CONFIG_EXT4_FS"
fi
############################# XFS #####################################
if [ "$CONFIG_FIRMWARE_ENABLE_XFS" != "y" ] ; then
	func_disable_busybox_param "CONFIG_FEATURE_VOLUMEID_XFS"
fi
############################# FUSE ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_FUSE" != "y" ] ; then
        func_disable_kernel_param "CONFIG_FUSE_FS"
fi
############################# SWAP ####################################
if [ "$CONFIG_FIRMWARE_ENABLE_SWAP" != "y" ] ; then
	func_disable_busybox_param "CONFIG_MKSWAP"
	func_disable_busybox_param "CONFIG_SWAPONOFF"
fi
############################# NFSD ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_NFSD" != "y" ] ; then
        func_disable_kernel_param "CONFIG_NFSD"
fi
############################# UVC #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_UVC" != "y" ] ; then
        func_disable_kernel_param "CONFIG_MEDIA_SUPPORT"
fi
############################# HID #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_HID" != "y" ] ; then
        func_disable_kernel_param "CONFIG_INPUT"
        func_disable_kernel_param "CONFIG_HID_SUPPORT"
        func_disable_kernel_param "CONFIG_USB_HID"
fi
############################# UART ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_SERIAL" != "y" ] ; then
        func_disable_kernel_param "CONFIG_USB_SERIAL_CH341"
        func_disable_kernel_param "CONFIG_USB_SERIAL_PL2303"
fi
fi
############################# XFRM ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_SSWAN" = "y" ] ; then
	CONFIG_FIRMWARE_INCLUDE_XFRM=y
fi
if [ "$CONFIG_PRODUCT" = "MT7621" ] ; then
if [ "$CONFIG_FIRMWARE_INCLUDE_XFRM" != "y" ] ; then
        func_disable_kernel_param "CONFIG_XFRM"
        func_disable_kernel_param "CONFIG_XFRM_USER"
        func_disable_kernel_param "CONFIG_XFRM_IPCOMP"
        func_disable_kernel_param "CONFIG_NET_KEY"
        func_disable_kernel_param "CONFIG_INET_AH"
        func_disable_kernel_param "CONFIG_INET_ESP"
        func_disable_kernel_param "CONFIG_INET_IPCOMP"
        func_disable_kernel_param "CONFIG_INET_XFRM_TUNNEL"
        func_disable_kernel_param "CONFIG_INET_XFRM_MODE_TRANSPORT"
        func_disable_kernel_param "CONFIG_INET_XFRM_MODE_TUNNEL"
        func_disable_kernel_param "CONFIG_INET_XFRM_MODE_BEET"
        func_disable_kernel_param "CONFIG_INET6_AH"
        func_disable_kernel_param "CONFIG_INET6_ESP"
        func_disable_kernel_param "CONFIG_INET6_IPCOMP"
        func_disable_kernel_param "CONFIG_INET6_XFRM_TUNNEL"
        func_disable_kernel_param "CONFIG_INET6_XFRM_MODE_TRANSPORT"
        func_disable_kernel_param "CONFIG_INET6_XFRM_MODE_TUNNEL"
        func_disable_kernel_param "CONFIG_INET6_XFRM_MODE_BEET"
        func_disable_kernel_param "CONFIG_NETFILTER_XT_MATCH_ESP"
        func_disable_kernel_param "CONFIG_NETFILTER_XT_MATCH_POLICY"
        func_disable_kernel_param "CONFIG_IP_NF_MATCH_AH"
        func_disable_kernel_param "CONFIG_IP6_NF_MATCH_AH"
        func_disable_kernel_param "CONFIG_IPV6_MULTIPLE_TABLES"
        func_disable_kernel_param "CONFIG_CRYPTO_AEAD"
        func_disable_kernel_param "CONFIG_CRYPTO_AEAD2"
        func_disable_kernel_param "CONFIG_CRYPTO_AUTHENC"
        func_disable_kernel_param "CONFIG_CRYPTO_CBC"
        func_disable_kernel_param "CONFIG_CRYPTO_HMAC"
        func_disable_kernel_param "CONFIG_CRYPTO_MD5"
        func_disable_kernel_param "CONFIG_CRYPTO_SHA256"
        func_disable_kernel_param "CONFIG_CRYPTO_AES"
        func_disable_kernel_param "CONFIG_CRYPTO_DES"
        func_disable_kernel_param "CONFIG_CRYPTO_DEFLATE"
fi
fi
############################ IPSET ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_IPSET" != "y" ] ; then
        func_disable_kernel_param "CONFIG_NETFILTER_NETLINK"
fi
############################# QOS #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_QOS" != "y" ] ; then
        func_disable_kernel_param "CONFIG_NET_SCHED"
        func_disable_kernel_param "CONFIG_NET_CLS"
        func_disable_kernel_param "CONFIG_NETFILTER_XT_TARGET_CLASSIFY"
#        func_disable_kernel_param "CONFIG_NETFILTER_XT_TARGET_IMQ"
#        func_disable_kernel_param "CONFIG_IMQ"
fi
############################# IMQ #####################################
#if [ "$CONFIG_FIRMWARE_INCLUDE_IMQ" != "y" ] ; then
#        func_disable_kernel_param "CONFIG_NETFILTER_XT_TARGET_IMQ"
#        func_disable_kernel_param "CONFIG_IMQ"
#fi
############################# IFB #####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_IFB" != "y" ] ; then
        func_disable_kernel_param "CONFIG_NET_SCH_INGRESS"
        func_disable_kernel_param "CONFIG_NET_CLS_ACT"
        func_disable_kernel_param "CONFIG_IFB"
fi
############################# NFSC ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_NFSC" != "y" ] ; then
        func_disable_kernel_param "CONFIG_FSCACHE"
        func_disable_kernel_param "CONFIG_NFS_FS"
fi
############################# CIFS ####################################
if [ "$CONFIG_FIRMWARE_INCLUDE_CIFS" != "y" ] ; then
        func_disable_kernel_param "CONFIG_CIFS"
        func_disable_busybox_param "CONFIG_FEATURE_MOUNT_CIFS"
fi
#if [ "$CONFIG_FIRMWARE_INCLUDE_SMBD" != "y" ] ; then
#        func_disable_kernel_param "CONFIG_NETFILTER_FP_SMB"
#fi
if [ "$CONFIG_FIRMWARE_INCLUDE_NFSD" != "y" -a "$CONFIG_FIRMWARE_INCLUDE_NFSC" != "y" -a "$CONFIG_FIRMWARE_I
NCLUDE_CIFS" != "y" ] ; then
        func_disable_kernel_param "CONFIG_NETWORK_FILESYSTEMS"
        if [ "$CONFIG_FIRMWARE_ENABLE_USB" != "y" ] || [ -z "$CONFIG_USB_SUPPORT" ] ; then
                func_disable_kernel_param "CONFIG_NLS"
                func_disable_kernel_param "CONFIG_LBDAF"
        fi
fi
############################# USB AUDIO ###############################
if [ "$CONFIG_FIRMWARE_INCLUDE_AUDIO" != "y" ] || [ "$CONFIG_FIRMWARE_ENABLE_USB" != "y" ] || [ -z "$CONFIG_
USB_SUPPORT" ] ; then
        func_disable_kernel_param "CONFIG_FW_LOADER"
        func_disable_kernel_param "CONFIG_SOUND"
fi
#######################################################################
